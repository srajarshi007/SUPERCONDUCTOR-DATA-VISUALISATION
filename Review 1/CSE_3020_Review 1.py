# -*- coding: utf-8 -*-
"""dvpro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OXoI43OYRnzR12C8i9iYKkqcahL1CUyH
"""

from google.colab import files
import pandas as pd
import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt

uploaded = files.upload()

data=pd.read_csv('../Datasets/train.csv')
mat_data=pd.read_csv('../Datasets/unique_m.csv')

data.head()

mat_data.head()

mat_data.describe()

data.describe()

df1=pd.DataFrame(data.dtypes)
pd.set_option('display.max_rows', df1.shape[0]+1)
df1

df2=pd.DataFrame(mat_data.dtypes)
pd.set_option('display.max_rows', df2.shape[0]+1)
df2

mat_data["material"]=mat_data["material"].astype('str')
mat_data["material"]

mat_data['contains_iron']=pd.cut(mat_data['Fe'],bins=[-1,0.000001,10000],labels=['Non-iron','Iron'])
mat_data['contains_copper']=pd.cut(mat_data['Cu'],bins=[-1,0.000001,10000],labels=['Non-copper','Copper'])
mat_data

fe_count=mat_data['contains_iron'].value_counts()
mat_content_dat_fe = pd.DataFrame(fe_count).reset_index()
mat_content_dat_fe.columns=['mat_content','count']
cu_count=mat_data['contains_copper'].value_counts()
mat_content_dat_cu= pd.DataFrame(cu_count).reset_index()
mat_content_dat_cu.columns=['mat_content','count']
mat_content_dat_cu.index=[2,3]
frames=[mat_content_dat_fe,mat_content_dat_cu]
mat_content_dat=pd.concat(frames)
mat_content_dat

plt.bar(mat_content_dat['mat_content'],mat_content_dat['count'])
plt.show()

correlation_data=data.corr(method='kendall')
sn.set(rc={'figure.figsize':(10,10)})
sn.heatmap(correlation_data,linewidths=0.005,linecolor="black")
plt.show()

corr_rank=pd.DataFrame(correlation_data['critical_temp'][0:-1])
corr_rank.sort_values(by=['critical_temp'],ascending=False)

sn.set(rc={'figure.figsize':(5,20)})
sn.heatmap(corr_rank,linewidths=0.005,annot=True,linecolor="black")

corr_df=pd.DataFrame(correlation_data['critical_temp'][0:-1]).reset_index()
corr_df.columns=['property','corr_factor']
corr_df['corr_sign']=pd.cut(corr_df['corr_factor'],bins=[-1,0,1],labels=["red","blue"])
corr_df['sl_no']=list(range(1,82))
corr_df

corr_df['corr_factor']=corr_df['corr_factor'].abs()
plt.figure(figsize=(20,5))
plt.scatter(corr_df['sl_no'],corr_df['corr_factor'],c=corr_df['corr_sign'],s=corr_df['corr_factor']*500)
plt.show()

plt.figure(figsize=(20,5))
corr_df.groupby(['corr_sign']).plot(x="sl_no",y="corr_factor",kind="bar")

df_corr_ne=corr_df.iloc[[0]]
df_corr_ne

corr_atmass=corr_df.iloc[1:11]
corr_atmass=corr_atmass.sort_values(by=['corr_factor'],ignore_index=True)
df_corr_am=corr_atmass.iloc[[9]]
df_corr_am

corr_fie=corr_df.iloc[11:21]
corr_fie=corr_fie.sort_values(by=['corr_factor'],ignore_index=True)
df_corr_fie=corr_fie.iloc[[9]]
df_corr_fie

corr_atrad=corr_df.iloc[21:31]
corr_atrad=corr_atrad.sort_values(by=['corr_factor'],ignore_index=True)
df_corr_ar=corr_atrad.iloc[[9]]
df_corr_ar

corr_den=corr_df.iloc[31:41]
corr_den=corr_den.sort_values(by=['corr_factor'],ignore_index=True)
df_corr_den=corr_den.iloc[[9]]
df_corr_den

corr_eaff=corr_df.iloc[41:51]
corr_eaff=corr_eaff.sort_values(by=['corr_factor'],ignore_index=True)
df_corr_ea=corr_eaff.iloc[[9]]
df_corr_ea

corr_fush=corr_df.iloc[51:61]
corr_fush=corr_fush.sort_values(by=['corr_factor'],ignore_index=True)
df_corr_fh=corr_fush.iloc[[9]]
df_corr_fh

corr_thcon=corr_df.iloc[61:71]
corr_thcon=corr_thcon.sort_values(by=['corr_factor'],ignore_index=True)
df_corr_tc=corr_thcon.iloc[[9]]
df_corr_tc

corr_val=corr_df.iloc[71:81]
corr_val=corr_val.sort_values(by=['corr_factor'],ignore_index=True)
df_corr_val=corr_val.iloc[[9]]
df_corr_val

corr_frames=[df_corr_ne,df_corr_am,df_corr_fie,df_corr_ar,df_corr_den,df_corr_ea,df_corr_fh,df_corr_tc,df_corr_val]
df_corr=pd.concat(corr_frames).reset_index()
del(df_corr['index'])
df_corr

df=data.iloc[:,np.r_[0,6,17,27,33,45,55,67,74,81]]
df

mat_df=mat_data
alkali_list=[list(mat_df.columns)[2],list(mat_df.columns)[10],list(mat_df.columns)[18],list(mat_df.columns)[36],list(mat_df.columns)[54]]
alkaline_list=[list(mat_df.columns)[3],list(mat_df.columns)[11],list(mat_df.columns)[19],list(mat_df.columns)[37],list(mat_df.columns)[55]]
transition_list=(list(mat_df.columns)[20:29])+(list(mat_df.columns)[38:47])+(list(mat_df.columns)[71:79])
posttransition_list=list(mat_df.columns)[12:13]+list(mat_df.columns)[29:31]+list(mat_df.columns)[47:50]+list(mat_df.columns)[79:85]
lantha_list=list(mat_df.columns)[56:71]
metalloids_list=list(mat_df.columns)[4:5]+list(mat_df.columns)[13:14]+list(mat_df.columns)[31:33]+list(mat_df.columns)[50:52]
nonmetals_list=list(mat_df.columns)[0:1]+list(mat_df.columns)[5:9]+list(mat_df.columns)[14:17]+list(mat_df.columns)[33:35]+list(mat_df.columns)[52:53]
noble_list=[list(mat_df.columns)[1],list(mat_df.columns)[9],list(mat_df.columns)[17],list(mat_df.columns)[35],list(mat_df.columns)[53],list(mat_df.columns)[85]]
mat_df['alkali_metals']=mat_df[alkali_list].sum(axis=1)
mat_df['alkaline_earth_metals']=mat_df[alkaline_list].sum(axis=1)
mat_df['transition_metals']=mat_df[transition_list].sum(axis=1)
mat_df['posttransition_metals']=mat_df[posttransition_list].sum(axis=1)
mat_df['lanthanoid_metals']=mat_df[lantha_list].sum(axis=1)
mat_df['metalloids']=mat_df[metalloids_list].sum(axis=1)
mat_df['reactive_nonmetals']=mat_df[nonmetals_list].sum(axis=1)
mat_df['noble_gases']=mat_df[noble_list].sum(axis=1)
mat_df

mat_df['tc_quantile']=pd.qcut(mat_df['critical_temp'],q=5,precision=0)
mat_class_df=mat_df.iloc[:,90:99]
pd.DataFrame(mat_class_df.groupby(['tc_quantile']).sum())
#mat_class_df.groupby(['tc_quantile']).sum().plot(kind='bar',figsize=(20,5))

mat_class_df.groupby(['tc_quantile']).sum().plot(kind='bar',figsize=(20,5))

mat_class_df

mat_df['tc_quantile'].unique()

desirable_df=mat_df.loc[mat_df['tc_quantile']==mat_df['tc_quantile'].unique()[4]]
des_nonmetal=desirable_df[nonmetals_list]
des_H=pd.DataFrame(des_nonmetal['H'])
des_H.columns=['stoich_coeff']
des_H['ele']='H'
des_C=pd.DataFrame(des_nonmetal['C'])
des_C.columns=['stoich_coeff']
des_C['ele']='C'
des_N=pd.DataFrame(des_nonmetal['N'])
des_N.columns=['stoich_coeff']
des_N['ele']='N'
des_O=pd.DataFrame(des_nonmetal['O'])
des_O.columns=['stoich_coeff']
des_O['ele']='O'
des_F=pd.DataFrame(des_nonmetal['F'])
des_F.columns=['stoich_coeff']
des_F['ele']='F'
des_P=pd.DataFrame(des_nonmetal['P'])
des_P.columns=['stoich_coeff']
des_P['ele']='P'
des_S=pd.DataFrame(des_nonmetal['S'])
des_S.columns=['stoich_coeff']
des_S['ele']='S'
des_Cl=pd.DataFrame(des_nonmetal['Cl'])
des_Cl.columns=['stoich_coeff']
des_Cl['ele']='Cl'
des_Se=pd.DataFrame(des_nonmetal['Se'])
des_Se.columns=['stoich_coeff']
des_Se['ele']='Se'
des_Br=pd.DataFrame(des_nonmetal['Br'])
des_Br.columns=['stoich_coeff']
des_Br['ele']='Br'
des_I=pd.DataFrame(des_nonmetal['I'])
des_I.columns=['stoich_coeff']
des_I['ele']='I'
des_frames=[des_H,des_C,des_N,des_O,des_F,des_P,des_S,des_Cl,des_Se,des_Br,des_I]
des_nonmetal=pd.concat(des_frames).reset_index()
del(des_nonmetal['index'])
des_nonmetal

sn.set(rc={'figure.figsize':(20,9)})
plot_nonmetals=sn.violinplot(x="stoich_coeff",y="ele",data=des_nonmetal[des_nonmetal['stoich_coeff']>0],scale="width",palette="Set3",inner="points")
plot_nonmetals=plot_nonmetals.set(xlim=(0,15))

des_transition=desirable_df[transition_list]
des_transition.describe().T.reset_index().sort_values(by=['mean'],ignore_index=True,ascending=False)

des_Cu=pd.DataFrame(des_transition['Cu'])
des_Cu.columns=['stoich_coeff']
des_Cu['ele']='Cu'
des_Y=pd.DataFrame(des_transition['Y'])
des_Y.columns=['stoich_coeff']
des_Y['ele']='Y'
des_Ni=pd.DataFrame(des_transition['Ni'])
des_Ni.columns=['stoich_coeff']
des_Ni['ele']='Ni'
des_Fe=pd.DataFrame(des_transition['Fe'])
des_Fe.columns=['stoich_coeff']
des_Fe['ele']='Fe'
des_V=pd.DataFrame(des_transition['V'])
des_V.columns=['stoich_coeff']
des_V['ele']='V'
des_Ag=pd.DataFrame(des_transition['Ag'])
des_Ag.columns=['stoich_coeff']
des_Ag['ele']='Ag'
des_tr_frames=[des_Cu,des_Y,des_Ni,des_Fe,des_V,des_Ag]
des_transition_metals=pd.concat(des_tr_frames).reset_index()
des_transition_metals

sn.set(rc={'figure.figsize':(20,7)})
plot_transition=sn.violinplot(x="stoich_coeff",y="ele",data=des_transition_metals[des_transition_metals['stoich_coeff']>0],scale="width",palette="Set3",inner="points")
plot_transition=plot_transition.set(xlim=(0,15))

des_alkaline=desirable_df[alkaline_list]
des_Be=pd.DataFrame(des_alkaline['Be'])
des_Be.columns=['stoich_coeff']
des_Be['ele']='Be'
des_Mg=pd.DataFrame(des_alkaline['Mg'])
des_Mg.columns=['stoich_coeff']
des_Mg['ele']='Mg'
des_Ca=pd.DataFrame(des_alkaline['Ca'])
des_Ca.columns=['stoich_coeff']
des_Ca['ele']='Ca'
des_Sr=pd.DataFrame(des_alkaline['Sr'])
des_Sr.columns=['stoich_coeff']
des_Sr['ele']='Sr'
des_Ba=pd.DataFrame(des_alkaline['Ba'])
des_Ba.columns=['stoich_coeff']
des_Ba['ele']='Ba'
des_alkaline_frames=[des_Be,des_Mg,des_Ca,des_Sr,des_Ba]
des_alkaline=pd.concat(des_alkaline_frames).reset_index()
del(des_alkaline['index'])
sn.set(rc={'figure.figsize':(20,7)})
plot_alkaline=sn.violinplot(x="stoich_coeff",y="ele",data=des_alkaline[des_alkaline['stoich_coeff']>0],scale="width",palette="Set3",inner="points")
plot_alkaline=plot_alkaline.set(xlim=(0,40))